<?php

namespace Books;

use App\Repositories\Books\BookExampleRepository;
use App\Repositories\Books\BookIndexDTO;
use App\Repositories\Books\Iterators\BookIterator;
use App\Services\Books\BookExampleService;
use PHPUnit\Framework\TestCase;

class BookExampleServiceTest extends TestCase
{
    protected BookExampleService $service;
    protected BookExampleRepository $bookExampleRepository;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->bookExampleRepository = $this->createMock(BookExampleRepository::class);

        $this->service = new BookExampleService(
            $this->bookExampleRepository
        );
    }

    public function testCheckYearNullAndEmptyResult(): void
    {
        $dto = new BookIndexDTO(
            now(),
            now(),
        );

        $this->bookExampleRepository
            ->expects(self::once())
            ->method('index')
            ->with($dto);

        $this->bookExampleRepository
            ->expects(self::never())
            ->method('filterByYear')
            ->with(0);

        $this->bookExampleRepository
            ->expects(self::never())
            ->method('useYearCreatedAtIndex');

        $result = collect();
        $this->bookExampleRepository
            ->expects(self::once())
            ->method('getData')
            ->willReturn($result);

        $serviceResult = $this->service->getSmallPages($dto);
        $this->assertSame(0, $serviceResult);
    }

    public function testCheckYearNotNullWithData(): void
    {
        $dto = new BookIndexDTO(
            now(),
            now(),
            2020
        );

        $this->bookExampleRepository
            ->expects(self::once())
            ->method('index')
            ->with($dto);

        $this->bookExampleRepository
            ->expects(self::once())
            ->method('filterByYear')
            ->with($dto->getYear());

        $this->bookExampleRepository
            ->expects(self::once())
            ->method('useYearCreatedAtIndex');

        $result = collect();
        $result->add(
            new BookIterator(
                (object)[
                    'id' => 1,
                    'name' => 'book1',
                    'year' => 2020,
                    'pages' => 99,
                    'createdAt' => time(),
                    'category_id' => 1,
                    'category_name' => 'cat1',
                ]
            )
        );
        $result->add(
            new BookIterator(
                (object)[
                    'id' => 1,
                    'name' => 'book1',
                    'year' => 2020,
                    'pages' => 100,
                    'createdAt' => time(),
                    'category_id' => 1,
                    'category_name' => 'cat1',
                ]
            )
        );
        $result->add(
            new BookIterator(
                (object)[
                    'id' => 1,
                    'name' => 'book1',
                    'year' => 2020,
                    'pages' => 101,
                    'createdAt' => time(),
                    'category_id' => 1,
                    'category_name' => 'cat1',
                ]
            )
        );
        $this->bookExampleRepository
            ->expects(self::once())
            ->method('getData')
            ->willReturn($result);

        $serviceResult = $this->service->getSmallPages($dto);
        $this->assertSame(2, $serviceResult);
    }
}
