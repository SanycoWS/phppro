<?php

namespace Services\Users;

use App\Repositories\Users\Itterators\UserIterator;
use App\Repositories\Users\UsersRepository;
use App\Services\Users\UserAuthService;
use App\Services\Users\UserLoginService;
use PHPUnit\Framework\TestCase;

class UserLoginServiceTest extends TestCase
{

    protected UserLoginService $service;
    protected UserAuthService $userAuthService;
    protected UsersRepository $usersRepository;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->usersRepository = $this->createMock(UsersRepository::class);
        $this->userAuthService = $this->createMock(UserAuthService::class);
        $this->service = new UserLoginService(
            $this->usersRepository,
            $this->userAuthService
        );
    }

    public function testValidData()
    {
        $userId = 1;
        $this->userAuthService
            ->expects(self::once())
            ->method('isCorrectUserData')
            ->with([])
            ->willReturn(true);

        $userIterator = new UserIterator(
            (object)[
                'id' => $userId,
                'email' => '',
            ]
        );
        $this->userAuthService
            ->expects(self::once())
            ->method('getUserId')
            ->willReturn($userId);

        $this->usersRepository
            ->expects(self::once())
            ->method('getById')
            ->with($userId)
            ->willReturn($userIterator);
        $result = $this->service->login([]);
        $this->assertSame($userIterator, $result);
    }

    public function testNotValidData()
    {
        $userId = 1;
        $this->userAuthService
            ->expects(self::once())
            ->method('isCorrectUserData')
            ->with([])
            ->willReturn(false);

        $this->userAuthService
            ->expects(self::never())
            ->method('getUserId');

        $this->usersRepository
            ->expects(self::never())
            ->method('getById')
            ->with($userId);
        $result = $this->service->login([]);
        $this->assertSame(null, $result);
    }
}
