<?php

namespace Books;

// use Illuminate\Foundation\Testing\RefreshDatabase;
use App\Models\Book;
use Illuminate\Testing\Fluent\AssertableJson;
use Tests\TestCase;

class BookUpdateTest extends TestCase
{
    private Book $book;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->book = Book::query()->first();
    }

    public function testSuccessfulUpdate(): void
    {
        $data = [
            'name' => 'testName',
            'id' => $this->book->id,
            'year' => 9999,
        ];
        $response = $this->putJson('/api/book/' . $this->book->id, $data);
        $response->assertStatus(200)
            ->assertJson(fn(AssertableJson $json) => $json
                ->where('data.name', $data['name'])
                ->where('data.year', $data['year'])
            )
            ->assertJsonStructure([
                'data' => [
                    'id',
                    'name',
                    'year',
                    'category' => [
                        'id',
                        'name',
                    ],
                    'createdAt'
                ]
            ]);
    }

    /**
     * @dataProvider dataFailedUpdate
     * @param array $data
     * @return void
     */
    public function testFailedUpdate(array $data): void
    {
        $response = $this->putJson('/api/book/' . $this->book->id, $data['sendData']);

        $response->assertStatus(422)
            ->assertJson(fn(AssertableJson $json) => $json
                ->where('errors.' . $data['field'] . '.0', $data['errorMessage'])
                ->etc()
            )
            ->assertJsonStructure([
                'message',
                'errors' => [
                    $data['field']
                ]
            ]);
    }

    public static function dataFailedUpdate(): array
    {
        return [
            'max name length' => [
                [
                    'sendData' => [
                        'name' => '123456789012345678901',
                        'lang' => '1',
                        'year' => 1,
                    ],
                    'errorMessage' => 'The name field must not be greater than 20 characters.',
                    'field' => 'name',
                ]
            ],
        ];
    }
}
